// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// App is an autogenerated mock type for the App type
type App struct {
	mock.Mock
}

type App_Expecter struct {
	mock *mock.Mock
}

func (_m *App) EXPECT() *App_Expecter {
	return &App_Expecter{mock: &_m.Mock}
}

// ClientHealthCheck provides a mock function with given fields: _a0
func (_m *App) ClientHealthCheck(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for HealthCheck")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// App_ClientHealthCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HealthCheck'
type App_ClientHealthCheck_Call struct {
	*mock.Call
}

// ClientHealthCheck is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *App_Expecter) ClientHealthCheck(_a0 interface{}) *App_ClientHealthCheck_Call {
	return &App_ClientHealthCheck_Call{Call: _e.mock.On("HealthCheck", _a0)}
}

func (_c *App_ClientHealthCheck_Call) Run(run func(_a0 context.Context)) *App_ClientHealthCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *App_ClientHealthCheck_Call) Return(_a0 error) *App_ClientHealthCheck_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *App_ClientHealthCheck_Call) RunAndReturn(run func(context.Context) error) *App_ClientHealthCheck_Call {
	_c.Call.Return(run)
	return _c
}

// GetBalance provides a mock function with given fields: _a0, _a1
func (_m *App) GetBalance(_a0 context.Context, _a1 string) (string, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetBalance")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// App_GetBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBalance'
type App_GetBalance_Call struct {
	*mock.Call
}

// GetBalance is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *App_Expecter) GetBalance(_a0 interface{}, _a1 interface{}) *App_GetBalance_Call {
	return &App_GetBalance_Call{Call: _e.mock.On("GetBalance", _a0, _a1)}
}

func (_c *App_GetBalance_Call) Run(run func(_a0 context.Context, _a1 string)) *App_GetBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *App_GetBalance_Call) Return(_a0 string, _a1 error) *App_GetBalance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *App_GetBalance_Call) RunAndReturn(run func(context.Context, string) (string, error)) *App_GetBalance_Call {
	_c.Call.Return(run)
	return _c
}

// NewApp creates a new instance of App. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewApp(t interface {
	mock.TestingT
	Cleanup(func())
}) *App {
	mock := &App{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
